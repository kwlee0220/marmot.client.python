# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import stream_pb2 as stream__pb2


class StreamServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.download = channel.stream_stream(
                '/proto.stream.StreamService/download',
                request_serializer=stream__pb2.UpMessage.SerializeToString,
                response_deserializer=stream__pb2.DownMessage.FromString,
                )
        self.upload = channel.stream_unary(
                '/proto.stream.StreamService/upload',
                request_serializer=stream__pb2.UpMessage.SerializeToString,
                response_deserializer=stream__pb2.DownMessage.FromString,
                )
        self.upAndDownload = channel.stream_stream(
                '/proto.stream.StreamService/upAndDownload',
                request_serializer=stream__pb2.MultiChannelUpMessage.SerializeToString,
                response_deserializer=stream__pb2.MultiChannelDownMessage.FromString,
                )
        self.upload_server_cancel = channel.stream_stream(
                '/proto.stream.StreamService/upload_server_cancel',
                request_serializer=stream__pb2.UpMessage.SerializeToString,
                response_deserializer=stream__pb2.DownMessage.FromString,
                )


class StreamServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def download(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upAndDownload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_server_cancel(self, request_iterator, context):
        """	rpc upndown_fail_0(stream UpRequestDownResponse) returns (stream UpResponseDownRequest);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'download': grpc.stream_stream_rpc_method_handler(
                    servicer.download,
                    request_deserializer=stream__pb2.UpMessage.FromString,
                    response_serializer=stream__pb2.DownMessage.SerializeToString,
            ),
            'upload': grpc.stream_unary_rpc_method_handler(
                    servicer.upload,
                    request_deserializer=stream__pb2.UpMessage.FromString,
                    response_serializer=stream__pb2.DownMessage.SerializeToString,
            ),
            'upAndDownload': grpc.stream_stream_rpc_method_handler(
                    servicer.upAndDownload,
                    request_deserializer=stream__pb2.MultiChannelUpMessage.FromString,
                    response_serializer=stream__pb2.MultiChannelDownMessage.SerializeToString,
            ),
            'upload_server_cancel': grpc.stream_stream_rpc_method_handler(
                    servicer.upload_server_cancel,
                    request_deserializer=stream__pb2.UpMessage.FromString,
                    response_serializer=stream__pb2.DownMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.stream.StreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def download(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.stream.StreamService/download',
            stream__pb2.UpMessage.SerializeToString,
            stream__pb2.DownMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/proto.stream.StreamService/upload',
            stream__pb2.UpMessage.SerializeToString,
            stream__pb2.DownMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upAndDownload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.stream.StreamService/upAndDownload',
            stream__pb2.MultiChannelUpMessage.SerializeToString,
            stream__pb2.MultiChannelDownMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_server_cancel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.stream.StreamService/upload_server_cancel',
            stream__pb2.UpMessage.SerializeToString,
            stream__pb2.DownMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
